<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Keunreol Park</title><link>https://ritter4u.github.io/</link><description>Recent content on Keunreol Park</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 01 Oct 2022 02:48:50 +0900</lastBuildDate><atom:link href="https://ritter4u.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorial 디자인 패턴 of Java</title><link>https://ritter4u.github.io/post/design-pattern/1/</link><pubDate>Sat, 01 Oct 2022 02:48:38 +0900</pubDate><guid>https://ritter4u.github.io/post/design-pattern/1/</guid><description>Tutorial 디자인 패턴 of Java</description></item><item><title>디자인 패턴 - Overview</title><link>https://ritter4u.github.io/post/design-pattern/2/</link><pubDate>Sat, 01 Oct 2022 02:48:43 +0900</pubDate><guid>https://ritter4u.github.io/post/design-pattern/2/</guid><description>디자인 패턴 - Overview</description></item><item><title>디자인 패턴 - Factory pattern</title><link>https://ritter4u.github.io/post/design-pattern/3/</link><pubDate>Sat, 01 Oct 2022 02:48:46 +0900</pubDate><guid>https://ritter4u.github.io/post/design-pattern/3/</guid><description>디자인 패턴 - Factory pattern</description></item><item><title>디자인 패턴 - Abstract Factory pattern</title><link>https://ritter4u.github.io/post/design-pattern/4/</link><pubDate>Sat, 01 Oct 2022 02:48:50 +0900</pubDate><guid>https://ritter4u.github.io/post/design-pattern/4/</guid><description>디자인 패턴 - Abstract Factory pattern</description></item><item><title>Xdebug in VSCode with Docker</title><link>https://ritter4u.github.io/post/xdebug-in-vscode-with-docker/</link><pubDate>Fri, 30 Sep 2022 14:31:09 +0900</pubDate><guid>https://ritter4u.github.io/post/xdebug-in-vscode-with-docker/</guid><description>Xdebug in VSCode with Docker</description></item><item><title>Mac환경에서 IntelliJ 키보드, 마우스 입력 씹힘 문제 해결</title><link>https://ritter4u.github.io/post/mac%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-intellij-%ED%82%A4%EB%B3%B4%EB%93%9C-%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9E%85%EB%A0%A5-%EC%94%B9%ED%9E%88%EB%8A%94-%ED%98%84%EC%83%81-%ED%95%B4%EA%B2%B0/</link><pubDate>Mon, 26 Sep 2022 14:31:09 +0900</pubDate><guid>https://ritter4u.github.io/post/mac%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-intellij-%ED%82%A4%EB%B3%B4%EB%93%9C-%EB%A7%88%EC%9A%B0%EC%8A%A4-%EC%9E%85%EB%A0%A5-%EC%94%B9%ED%9E%88%EB%8A%94-%ED%98%84%EC%83%81-%ED%95%B4%EA%B2%B0/</guid><description>Mac환경에서 IntelliJ 키보드, 마우스 입력 씹힘 문제 해결</description></item><item><title>Understanding Onion Architecture</title><link>https://ritter4u.github.io/post/understanding-onion-architecture/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/understanding-onion-architecture/</guid><description>A brief guide Understanding Onion Architecture</description></item><item><title>프로젝트 수행 이력</title><link>https://ritter4u.github.io/portfolio/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/portfolio/</guid><description>Hugo, the world's fastest framework for building websites</description></item><item><title>Awards</title><link>https://ritter4u.github.io/awards/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/awards/</guid><description>Hugo Awards, an annual literary award for the best science fiction or fantasy works</description></item><item><title>Certifications</title><link>https://ritter4u.github.io/certifications/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/certifications/</guid><description>Hugo Certifications</description></item><item><title/><link>https://ritter4u.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/archives/</guid><description/></item><item><title>Contact</title><link>https://ritter4u.github.io/contact/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/contact/</guid><description>Contact Page</description></item><item><title>About</title><link>https://ritter4u.github.io/about/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/about/</guid><description>Hugo, the world's fastest framework for building websites</description></item><item><title/><link>https://ritter4u.github.io/imprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/imprint/</guid><description>Legal Disclosure Information in accordance with the applicable law
Jane Doe</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-abstract-factory-patterns-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-abstract-factory-patterns-copy/</guid><description>Abstract Factory patterns work around a super-factory which creates other factories.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-adapter-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-adapter-pattern-copy/</guid><description>Adapter pattern works as a bridge between two incompatible interfaces.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-bridge-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-bridge-pattern-copy/</guid><description>Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-builder-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-builder-pattern-copy/</guid><description>Builder pattern builds a complex object using simple objects and using a step by step approach.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-business-delegate-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-business-delegate-pattern-copy/</guid><description>Business Delegate Pattern is used to decouple presentation tier and business tier.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-chain-of-responsibility-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-chain-of-responsibility-pattern-copy/</guid><description>As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-command-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-command-pattern-copy/</guid><description>Command pattern is a data driven design pattern and falls under behavioral pattern category.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-composite-entity-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-composite-entity-pattern-copy/</guid><description>Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB entity bean which represents a graph of objects.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-data-access-object-pattern-or-dao-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-data-access-object-pattern-or-dao-pattern/</guid><description>Data Access Object Pattern 또는 DAO 패턴은 낮은 수준의 데이터 액세스 API 또는 작업을 높은 수준의 비즈니스 서비스와 분리하는 데 사용됩니다.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-decorator-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-decorator-pattern-copy/</guid><description>Decorator pattern allows a user to add new functionality to an existing object without altering its structure.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-factory-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-factory-pattern-copy/</guid><description>Factory pattern is one of the most used design patterns in Java.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-filter-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-filter-pattern-copy/</guid><description>Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-flyweight-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-flyweight-pattern-copy/</guid><description>Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-interpreter-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-interpreter-pattern-copy/</guid><description>Interpreter pattern provides a way to evaluate language grammar or expression.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-iterator-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-iterator-pattern-copy/</guid><description>Iterator pattern is very commonly used design pattern in Java and .</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-mediator-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-mediator-pattern-copy/</guid><description>Mediator pattern is used to reduce communication complexity between multiple objects or classes.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-memento-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-memento-pattern-copy/</guid><description>Memento pattern is used to restore state of an object to a previous state.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-mvc-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-mvc-pattern-copy/</guid><description>MVC Pattern stands for Model-View-Controller Pattern. This pattern is used to separate application's concerns.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-null-object-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-null-object-pattern-copy/</guid><description>In Null Object pattern, a null object replaces check of NULL object instance.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-observer-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-observer-pattern-copy/</guid><description>Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-overview2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-overview2/</guid><description>Design patterns represent the best practices used by experienced object-oriented software developers.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-prototype-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-prototype-pattern-copy/</guid><description>Prototype pattern refers to creating duplicate object while keeping performance in mind.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-prototype-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-prototype-pattern/</guid><description>Prototype pattern refers to creating duplicate object while keeping performance in mind.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-proxy-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-proxy-pattern-copy/</guid><description>In proxy pattern, a class represents functionality of another class.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-service-locator-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-service-locator-pattern-copy/</guid><description>The service locator design pattern is used when we want to locate various services using JNDI lookup.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-singleton-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-singleton-pattern-copy/</guid><description>Singleton pattern is one of the simplest design patterns in Java.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-state-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-state-pattern-copy/</guid><description>In State pattern a class behavior changes based on its state.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-strategy-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-strategy-pattern-copy/</guid><description>In Strategy pattern, a class behavior or its algorithm can be changed at run time.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-template-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-template-pattern-copy/</guid><description>In Template pattern, an abstract class exposes defined way(s)/template(s) to execute its methods.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-the-front-controller-design-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-the-front-controller-design-pattern-copy/</guid><description>The front controller design pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-the-intercepting-filter-design-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-the-intercepting-filter-design-pattern-copy/</guid><description>The intercepting filter design pattern is used when we want to do some pre-processing / post-processing with request or response of the application.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-transfer-object-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-transfer-object-pattern-copy/</guid><description>The Transfer Object pattern is used when we want to pass data with multiple attributes in one shot from client to server.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-visitor-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-visitor-pattern-copy/</guid><description>In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-facade-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-facade-pattern-copy/</guid><description>Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system.</description></item><item><title/><link>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%A7%80%EC%95%88-%ED%8C%A8%ED%84%B4-composite-pattern-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ritter4u.github.io/post/design-pattern/%EB%94%94%EC%A7%80%EC%95%88-%ED%8C%A8%ED%84%B4-composite-pattern-copy/</guid><description>Composite pattern is used where we need to treat a group of objects in similar way as a single object.</description></item></channel></rss>